name: Lint Code with Pylint

on:
  pull_request:
    branches:
      - '**'
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    env:
      OVERALL_SCORE_LIMIT: 8.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip          
          pip install pylint

      - name: Run pylint on entire project
        id: pylint_project
        run: |
          echo "Starting pylint check on ./src"
          echo "Current local path:"
          pwd
          
          echo "Listing contents of the current directory:"
          ls -la

          pylint ./src > pylint_report.txt || true
          echo "Pylint check completed, report saved to pylint_report.txt"
          
          echo "Calculating pylint score..."
          pylint_score=$(pylint --exit-zero ./src | tail -n 2 | grep -oE '[0-9]+\.[0-9]+/10' | head -n 1 | cut -d '/' -f 1)
          echo "Pylint score calculated: $pylint_score"
          
          echo "Setting pylint score output..."
          echo "project_score=$pylint_score" >> $GITHUB_ENV

      - name: Upload pylint report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pylint-report
          path: |
            pylint_report.txt

      - name: Evaluate pylint scores
        run: |
          echo "Evaluating pylint score for the entire project..."
          project_score=$(cat $GITHUB_ENV | grep 'project_score' | cut -d '=' -f 2)
          if (( $(echo "$project_score < $OVERALL_SCORE_LIMIT" | bc -l) )); then
            echo "Pylint score is below $OVERALL_SCORE_LIMIT: $project_score"
            exit 1
          else
            echo "Pylint score is acceptable: $project_score"
          fi
      
